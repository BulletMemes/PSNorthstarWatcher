#Add to use forms
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

#detect script path because $PSScriptRoot does not work in ps2exe
if ($MyInvocation.MyCommand.CommandType -eq "ExternalScript"){
    $ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition
}
 else { $ScriptPath = Split-Path -Parent -Path ([Environment]::GetCommandLineArgs()[0]) 
     if (!$ScriptPath){ $ScriptPath = "." }
}

#region functions

#
function Write-FileUtf8{
    param(
        #[string]$InputVar will convert arrays to strings/newlines
        [string]$InputVar,[string]$Filepath,[bool]$Append
    )
    if($Append){
        $InputVar | Out-File -Append -Encoding utf8 -FilePath $Filepath
    }else{
        $InputVar | Out-File -Encoding utf8 -FilePath $Filepath
    }
}

#endregion functions

#region classes
class NorthstarServer {
    [int]$ProcessID = 0

    [string]$ns_server_name = '"Northstar Server generated by PowerShell"'#cfg
    [string]$ns_server_desc = '"Default description."' #cfg
    [int]$ns_player_auth_port = "8081"#cfg
    [int]$UDPPort = "37015"
    [string]$Directory = "1"
    [string]$AbsolutePath = ""
    [string]$BinaryFileName = "NorthstarLauncher.exe"
    [string]$ns_masterserver_hostname = '"https://northstar.tf"' #cfg
    [string]$StartingArgs = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [int]$ns_report_server_to_masterserver = 1 #cfg
    [int]$ns_auth_allow_insecure = 0 #cfg
    [int]$ns_should_return_to_lobby = 0 #cfg
    [int]$ns_private_match_only_host_can_change_settings = 0#cfg
    [ValidateSet('"tdm"', '"cp"','"ctf"','"lts"','"ps"','"ffa"','"speedball"','"mfd"','"ttdm"','"fra"','"gg"','"inf"','"tt"','"kr"','"fastball"','"arena"','"ctf_comp"','"attdm"')][string]$ns_private_match_last_mode = '"tdm"' #cfg
    [string]$ns_server_password = '""' #cfg
    [SetplaylistVarOverrides]$SetplaylistVarOverrides = [SetplaylistVarOverrides]::new() #
    [Tickrate]$TickRate = [Tickrate]::new()#cf

    [int]$net_chan_limit_mode = 2
    [int]$net_chan_limit_msec_per_sec = 100
    [int]$sv_querylimit_per_sec = 15
    [int]$net_data_block_enabled = 0
    [int]$host_skip_client_dll_crc = 1
    [int]$everything_unlocked = 1
    [int]$ns_erase_auth_info = 1
    [int]$ns_report_sp_server_to_masterserver = 0

    #each object in this array contains 1 line of the config file
    [System.Collections.ArrayList]$autoexec_ns_server = @()

    #will write earch configuration to config file autoexec_ns_server based on the class' property names (ns_*, sv_*, host_*, ...)
    [void]WriteConfiguration(){
        $CVarArray = (($this | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($Cvar in $CVarArray){
            if($Cvar -match 'ns_' -or $Cvar -match 'host_' -or $Cvar -match 'everything_' -or $Cvar -match 'sv_' -or $Cvar -match 'net_'){
                $this.autoexec_ns_server.Add($Cvar +" "+ $this."$Cvar")
            }
        }
        $CVarArrayTickrate = (($this.TickRate | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($CVar in $CVarArrayTickrate){
            $this.autoexec_ns_server.Add($Cvar +" "+ $this.Tickrate."$Cvar")
        }
        $this.autoexec_ns_server.RemoveAt(0)
        $this.autoexec_ns_server | Out-File -Encoding utf8 -FilePath "$($this.AbsolutePath)\R2Northstar\mods\Northstar.CustomServers\mod\cfg\autoexec_ns_server.cfg"
    }

    [void]Start(){
        
        Start-Process -WorkingDirectory $this.AbsolutePath -FilePath "$($this.AbsolutePath)\$($this.BinaryFileName)" -ArgumentList $this.StartingArgs
    }
}

class SetplaylistVarOverrides {
    [string]$maxplayersplaylist = "-maxplayersplaylist" # should always be "-maxplayersplaylist"
    [int]$custom_air_accel_pilot
    [int]$pilot_health_multiplier
    [int]$run_epilogue
    [int]$respawn_delay

    [int]$boosts_enabled
    [int]$earn_meter_pilot_overdrive 
    [int]$earn_meter_pilot_multiplier

    [int]$earn_meter_titan_multiplier
    [int]$aegis_upgrades  
    [int]$infinite_doomed_state
    [int]$titan_shield_regen  

    [int]$scorelimit
    [int]$roundscorelimit
    [int]$timelimit
    [int]$oob_timer_enabled
    [int]$roundtimelimit

    [int]$classic_rodeo
    [int]$classic_mp
    [int]$fp_embark_enabled
    [int]$promode_enable

    [int]$riff_floorislava
    [int]$featured_mode_all_holopilot
    [int]$featured_mode_all_grapple
    [int]$featured_mode_all_phase
    [int]$featured_mode_all_ticks
    [int]$featured_mode_tactikill
    [int]$featured_mode_amped_tacticals
    [int]$featured_mode_rocket_arena
    [int]$featured_mode_shotguns_snipers
    [int]$iron_rules

    [int]$riff_player_bleedout
    [int]$player_bleedout_forceHolster
    [int]$player_bleedout_forceDeathOnTeamBleedout
    [int]$player_bleedout_bleedoutTime
    [int]$player_bleedout_firstAidTime
    [int]$player_bleedout_firstAidTimeSelf
    [int]$player_bleedout_firstAidHealPercent
    [int]$player_bleedout_aiBleedingPlayerMissChance
}

class TickRate {
    [double]$base_tickinterval_mp = 0.016666667 # default for 60  tick server / 20 tick client
    [int]$rate = 786432
    [int]$sv_updaterate_mp = 20 # default for 60  tick server / 20 tick client
    [int]$sv_minupdaterate = 20 # default for 60  tick server / 20 tick client
    [int]$sv_max_snapshots_multiplayer = 300 # updaterate * 15
}


class Installer {
    [int]$ServerCount = 1
    [string]$InstallDir = "$env:localappdata\NorthstarServer"  #default $env:localappdata\Northstarserver
    [string]$TitanfallSourceDir = "${env:ProgramFiles(x86)}\Origin\Titanfall2" #default ${env:ProgramFiles(x86)}\Origin\Titanfall2
    [string]$NorthstarSourceDir = "Northstar" #default: same folder
    [string]$ServerNamePrefix = "Northstar Server generated by PowerShell"
    [string]$StartingArgsAll = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [System.Collections.ArrayList]$NorthstarServers = @() #System.Collections.ArrayList of [NorthstarServer] gets in here
    [int]$UDPStartPort = 37015
    [int]$UDPEndPort = 37019
    [int]$TCPStartPort = 8081
    [int]$TCPEndPort = 8089

    [bool]$EZMode = $True

    Installer($inputTitanfall2Path){
        if($inputTitanfall2Path){
            $this.TitanfallSourceDir = $inputTitanfall2Path
            Write-Host "Titanfall2 directory could be read from registry. You should be safe to use default value later."
        }
        else{
            Write-Host "Titanfall2 directory could NOT be read from registry.You have to set it manually later in the process."
        }
    }

    #[PSNSWatcherConfig]$PSNSWatcherConfig = [PSNSWatcherConfig]::new($this.InstallDir)
    

    [string]GetUserInput($installervar,$message,$inputtype){
        
        $defaultstring = "`nPress Enter for default`n`n"
        $spacer = "`n`n---------------------`n"
        $usingdefault = "Using default value."
        $config = ""


        Switch($inputtype){
            "YesNoNoInstallerVar"{
                $userinput = Read-Host "$($spacer)$message $defaultstring [Y]"
                if(HasNoUserInput $userinput){
                    Write-Host "$usingdefault : [Y]"
                    return "Y"
                }else{
                    return $userinput
                }
             }

             "String"{
                $userinput = Read-Host "$($spacer)$message $defaultstring [$installervar]"
                if(HasNoUserInput $userinput){
                    Write-Host "$usingdefault : $installervar"
                    return "$installervar"
                }else{
                    return $userinput
                }
             }
            default{
                throw "Wrong inputtype for GetUserInputConfig selected."
            }
        }
        return ""
    }
    [void]GetUserInputConfig(){
        $this.ServerCount = [int]($this.GetUserInput($this.ServerCount,"How many servers do you want to install?","String"))
        $this.TitanfallSourceDir = $this.GetUserInput($this.TitanfallSourceDir,"Where is your Titanfall2 game directory?","String")
        $this.InstallDir = $this.GetUserInput($this.InstallDir,"Where do you want to install NorthstarServers to?","String")
        #$this.PSNSWatcherConfig.originpath = "$($this.InstallDir)\"
        $this.StartingArgsAll = $this.GetUserInput($this.StartingArgsAll,"What starting arguments do you want to use? Default strongly recommended!","String")
        $this.UDPStartPort = [int]($this.GetUserInput($this.UDPStartPort,"Please type in the first UDP port you want to use.","String"))
        if($this.ServerCount -gt 1){
            $this.UDPEndPort = [int]($this.GetUserInput($this.UDPEndPort,"Please type in the last UDP port you want to use of your range.","String"))
        }
       
        $this.TCPStartPort = [int]($this.GetUserInput($this.TCPStartPort,"Please type in the first TCP port you want to use.","String"))
        if($this.ServerCount -gt 1){
            $this.TCPEndPort = [int]($this.GetUserInput($this.TCPEndPort,"Please type in the last TCP port you want to use of your range.","String"))
        }
        
        $this.ServerNamePrefix = $this.GetUserInput($this.ServerNamePrefix,"What server name prefix do you want to use for all your servers?","String")
        
        #$this.PSNSWatcherConfig.myserverfilternamearray = $this.PSNSWatcherConfig.myserverfilternamearray + @($this.ServerNamePrefix)
        
        $this.PSNSWatcherConfig.northstarlauncherargs = $this.PSNSWatcherConfig.northstarlauncherargs + @($this.StartingArgsAll)

        $tcpport = $this.TCPStartPort
        $udpport = $this.UDPStartPort
        For($servercounter = 0;$servercounter -lt $this.ServerCount;$servercounter++){
            $this.NorthstarServers.Add([NorthstarServer]::new())
            $this.NorthstarServers[$servercounter].ns_server_name = '"' +($this.ServerNamePrefix) + " #$($servercounter+1)" + '"'
            $this.NorthstarServers[$servercounter].Directory = [string]($servercounter+1)
            $this.PSNSWatcherConfig.gamedirs = $this.PSNSWatcherConfig.gamedirs + @($this.NorthstarServers[$servercounter].Directory)
            $this.NorthstarServers[$servercounter].AbsolutePath = ($this.InstallDir) + "\" +$this.NorthstarServers[$servercounter].Directory
            $this.NorthstarServers[$servercounter].ns_player_auth_port = $tcpport
            $this.PSNSWatcherConfig.tcpportarray = $this.PSNSWatcherConfig.tcpportarray + $this.NorthstarServers[$servercounter].ns_player_auth_port
            $this.NorthstarServers[$servercounter].UDPPort = $udpport
            $this.PSNSWatcherConfig.udpportarray = $this.PSNSWatcherConfig.udpportarray + @($this.NorthstarServers[$servercounter].UDPPort)
            $this.NorthstarServers[$servercounter].Tickrate = [TickRate]::new()
            $this.NorthstarServers[$servercounter].StartingArgs = ($this.StartingArgsAll) + " -port $($this.NorthstarServers[$servercounter].UDPPort)"
            
            if($udpport -gt $this.UDPEndPort){
                throw "Not enough UDP Ports available for the amount of servers. Servercount: " +$this.ServerCount + " UDP Start port: " +$this.UDPStartPort + " UDP end port: " +$this.UDPEndPort
            }
            
            if($tcpport -gt $this.TCPEndPort){
                throw "Not enough TCP Ports available for the amount of servers. Servercount: "+$this.ServerCount+" TCP Start port: "+$this.TCPStartPort+" TCP end port: "+$this.TCPEndPort
            }
            $this.NorthstarServers[$servercounter].ns_private_match_last_mode = '"' + ($this.GetUserInput($this.NorthstarServers[$servercounter].ns_private_match_last_mode,"What gamemode would you like to run on Server $($this.NorthstarServers[$servercounter].ns_server_name)","String")) + '"'
            Switch(($this.GetUserInput($this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings,"Do you want players to be able to change map and mode in lobby on Server $($this.NorthstarServers[$servercounter].ns_server_name)","YesNoNoInstallerVar"))){
                "Y"{$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 0}
                "N"{$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 2}
            }
            $udpport++
            $tcpport++
        }
    }

    [void]Install(){ #install all servers
        if(Test-Path ($this.NorthstarSourceDir)){
                Write-Host "Northstar source directory exists."
                if(Test-Path "$($this.NorthstarSourceDir)\R2Northstar"){
                    Write-Host "$($this.NorthstarSourceDir)\R2Northstar exists"
                    if("$($this.NorthstarSourceDir)\NorthstarLauncher.exe"){
                        Write-Host "Executable NorthstarLauncher.exe exists"
                    }
                    else{
                        throw "Executable $($this.NorthstarSourceDir)\NorthstarLauncher.exe not found."
                    }
                }else{
                    throw "$($this.NorthstarSourceDir)\R2Northstar does not exist."
                }
            }else{
                throw "Northstar source directory does not exist."
            }
        if(Test-Path $this.InstallDir){
            Write-Host "Destination Path InstallDir $($this.InstallDir) exists."
        }
        else{
            Write-Host "Destination Path InstallDir $($this.InstallDir) missing. Creating ..."
            New-Item -ItemType Directory -Path $($this.InstallDir)
        }
        if(Test-Path $this.TitanfallSourceDir){
            Write-Host "Titanfall Source folder exists."
        }else{
            throw "Titanfall source at $($this.TitanfallSourceDir) does not exist."
        }
        ForEach($server in $this.NorthstarServers){
            if(Test-Path "$($this.installdir)\$($server.Directory)"){
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name does exist."
            }else{
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name missing. Creating..."
                New-Item -ItemType Directory -Path "$($this.installdir)\$($server.Directory)"
            }
            
            Write-Host "Creating symbolic links for Titanfall2 files in $($this.installdir)\$($server.Directory)"
            $tffiles = Get-Childitem $this.TitanfallSourceDir
            ForEach($file in $tffiles){
                if(Test-Path "$($this.installdir)\$($server.Directory)\$($file.name)"){ #does the item exist at the target, where the symbolic link should be placed?
                    $target = get-item "$($this.installdir)\$($server.Directory)\$($file.name)" #put target in an item object
                    Write-Host "Cannot create symbolic link at $target because it already exists."
                    if($target.LinkType -eq "SymbolicLink"){
                        Write-Host "$target is a symbolic link."
                        if($target.Target -eq $file.fullname){ #is it pointing to the right target?
                            Write-Host "$target symbolic link does point to the right file/directory."
                        }
                        else{throw "$target link is not correct, please delete it and run setup again."}
                    }else{
                        Write-Host "Target is $target"
                        Write-Host '$target.LinkType -eq "SymbolicLink"'  + " is " + ($target.LinkType -eq "SymbolicLink")
                        throw "$target is not a link, please inspect that file and eventually remove it. Then run setup again."}
                }else{
                    New-Item -ItemType SymbolicLink -Path "$($this.installdir)\$($server.Directory)\$($file.name)" -Value $file.fullname
                }
            }

            Write-Host "Copying files from Northstar Source to Destination"
            Copy-Item -Recurse -Path "$($this.NorthstarSourceDir)\*" -Destination "$($this.installdir)\$($server.Directory)" -ErrorAction SilentlyContinue
        }
    }

    [void]WriteConfigurationAll(){
        ForEach($server in $this.NorthstarServers){
            $server.WriteConfiguration()
        }
    }

}
#endregion classes