#northstarsetup

$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)){
    Write-Host "Running with administrator privileges."
}else{
    Write-Host "Not running with administrator privileges. Starting again"
    Start-Process powershell.exe -WorkingDirectory $PSScriptRoot -ArgumentList "-File `"$($PSScriptRoot)\PSNorthstarSetup.ps1`"" -Verb runas 
    throw "notadmin"
}

#region vars
Write-Host "Preparing...."
$defaultstring = "`nPress Enter for default`n`n"
$spacer = "`n`n---------------------`n"
$usingdefault = "Using default value."
#$gamemodearray = @("tdm", "cp","ctf","lts","ps","ffa","speedball","mfd","ttdm","fra","gg","inf","tt","kr","fastball","arena","ctf_comp","attdm")
#[System.Collections.ArrayList]$northstarservers = @() #Initialize as arraylist to add easier later
$installer = [Installer]::new() #initializ with defaults
$wanip = (Resolve-DnsName -NoRecursion -Server resolver1.opendns.com -Name myip.opendns.com).IPAddress
$routerip = (Test-NetConnection -TraceRoute 8.8.8.8).Traceroute[0]
$routeripsplit = $routerip.split(".")
$lanip = Get-NetIPConfiguration | findstr ("$($routeripsplit[0]).$($routeripsplit[1]).$($routeripsplit[2])") | findstr "IPv4Address"

#endregion var definition

#region functions
function HasNoUserInput($userinput){
    if([string]::IsNullOrWhiteSpace($userinput)){
        return $true
    }
    else{return $false}
}

#endregion functions

#region classes
class NorthstarServer {
    [string]$ns_server_name = '"Northstar Server generated by PowerShell"'#cfg
    [string]$ns_server_desc = '"Default description."' #cfg
    [int]$ns_player_auth_port = "8081"#cfg
    [int]$UDPPort = "37015"
    [string]$Directory = "1"
    [string]$AbsolutePath = ""
    [string]$BinaryFileName = "NorthstarLauncher.exe"
    [string]$ns_masterserver_hostname = '"https://northstar.tf"' #cfg
    [string]$StartingArgs = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [int]$ns_report_server_to_masterserver = 1 #cfg
    [int]$ns_auth_allow_insecure = 0 #cfg
    [int]$ns_should_return_to_lobby = 0 #cfg
    [int]$ns_private_match_only_host_can_change_settings = 0#cfg
    [ValidateSet("tdm", "cp","ctf","lts","ps","ffa","speedball","mfd","ttdm","fra","gg","inf","tt","kr","fastball","arena","ctf_comp","attdm")][string]$LastGamemode = "tdm" #cfg
    [string]$ns_server_password = '""' #cfg
    [SetplaylistVarOverrides]$SetplaylistVarOverrides #
    [Tickrate]$TickRate #cf

    [int]$net_chan_limit_mode = 2
    [int]$net_chan_limit_msec_per_sec = 100
    [int]$sv_querylimit_per_sec = 15
    [int]$net_data_block_enabled = 0
    [int]$host_skip_client_dll_crc = 1
    [int]$everything_unlocked = 1
    [int]$ns_erase_auth_info = 0
    [int]$ns_report_sp_server_to_masterserver = 0

    [System.Collections.ArrayList]$autoexec_ns_server = @()

    [void]Start(){
        
        Start-Process -WorkingDirectory $this.AbsolutePath -FilePath "$($this.AbsolutePath)\$($this.BinaryFileName)" -ArgumentList $this.StartingArgs
    }

    #($installer.NorthstarServers[0].WriteConfiguration()).psobject.properties
    #($installer.NorthstarServers[0] | Get-Member) | where-object -Property MemberType -eq Property
    #($installer.NorthstarServers[0] | Get-Member) | where-object -Property MemberType -eq Property
    #(($installer.NorthstarServers[0] | Get-Member) | where-object -Property MemberType -eq Property).Definition
    #(($installer.NorthstarServers[0] | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{Write-Host $($_.Definition).split(" ")[1]}

    [void]WriteConfiguration(){
        $CVarArray = (($this | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($Cvar in $CVarArray){
            if($Cvar -match 'ns_' -or $Cvar -match 'host_' -or $Cvar -match 'everything_' -or $Cvar -match 'sv_' -or $Cvar -match 'net_'){
                $this.autoexec_ns_server.Add($Cvar +" "+ $this."$Cvar")
            }
        }
        $CVarArrayTickrate = (($this.TickRate | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($CVar in $CVarArrayTickrate){
            $this.autoexec_ns_server.Add($Cvar +" "+ $this.Tickrate."$Cvar")
        }
        $this.autoexec_ns_server.RemoveAt(0)
        $this.autoexec_ns_server | Out-File -Encoding utf8 -FilePath "$($this.AbsolutePath)\R2Northstar\mods\Northstar.CustomServers\mod\cfg\autoexec_ns_server.cfg"
    }
}

class SetplaylistVarOverrides {
    [string]$maxplayersplaylist = "-maxplayersplaylist" # should always be "-maxplayersplaylist"
    [int]$custom_air_accel_pilot
    [int]$pilot_health_multiplier
    [int]$run_epilogue
    [int]$respawn_delay

    [int]$boosts_enabled
    [int]$earn_meter_pilot_overdrive 
    [int]$earn_meter_pilot_multiplier

    [int]$earn_meter_titan_multiplier
    [int]$aegis_upgrades  
    [int]$infinite_doomed_state
    [int]$titan_shield_regen  

    [int]$scorelimit
    [int]$roundscorelimit
    [int]$timelimit
    [int]$oob_timer_enabled
    [int]$roundtimelimit

    [int]$classic_rodeo
    [int]$classic_mp
    [int]$fp_embark_enabled
    [int]$promode_enable

    [int]$riff_floorislava
    [int]$featured_mode_all_holopilot
    [int]$featured_mode_all_grapple
    [int]$featured_mode_all_phase
    [int]$featured_mode_all_ticks
    [int]$featured_mode_tactikill
    [int]$featured_mode_amped_tacticals
    [int]$featured_mode_rocket_arena
    [int]$featured_mode_shotguns_snipers
    [int]$iron_rules

    [int]$riff_player_bleedout  #datatype right?
    [int]$player_bleedout_forceHolster
    [int]$player_bleedout_forceDeathOnTeamBleedout  #datatype right?
    [int]$player_bleedout_bleedoutTime
    [int]$player_bleedout_firstAidTime
    [int]$player_bleedout_firstAidTimeSelf
    [int]$player_bleedout_firstAidHealPercent
    [int]$player_bleedout_aiBleedingPlayerMissChance
}

class TickRate {
    [double]$base_tickinterval_mp = 0.016666667
    [int]$rate = 786432
    [int]$sv_updaterate_mp = 20 #default 60 for 60 tick
    [int]$sv_minupdaterate = 20 #default 60 for 60 tick
    [int]$sv_max_snapshots_multiplayer = 300 # updaterate * 15
}


class Installer {
    [int]$ServerCount = 1
    [string]$InstallDir = "$env:localappdata\NorthstarServer"  #default $env:localappdata\Northstarserver
    [string]$TitanfallSourceDir = "${env:ProgramFiles(x86)}\Origin\Titanfall2" #default ${env:ProgramFiles(x86)}\Origin\Titanfall2
    [string]$NorthstarSourceDir = "Northstar" #default: same folder
    [string]$ServerNamePrefix = "Northstar Server generated by PowerShell"
    [string]$StartingArgsAll = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [System.Collections.ArrayList]$NorthstarServers = @() #System.Collections.ArrayList of [NorthstarServer] gets in here
    [int]$UDPStartPort = 37015
    [int]$UDPEndPort = 37019
    [int]$TCPStartPort = 8081
    [int]$TCPEndPort = 8089

    [PSNSWatcherConfig]$PSNSWatcherConfig = [PSNSWatcherConfig]::new($this.InstallDir)

    [void]GetUserInputConfig(){
        $defaultstring = "`nPress Enter for default`n`n"
    $spacer = "`n`n---------------------`n"
    $usingdefault = "Using default value."
        <# = Read-Host "$($spacer)TEXT $defaultstring []"
        if (HasNoUserInput $){
            Write-Host $usingdefault
        }#>

        $readservercount = Read-Host "$($spacer)How many servers do you want to install? $defaultstring [1]"
        if (HasNoUserInput $readservercount){
            Write-Host $usingdefault
        }else{
            $this.ServerCount = [int]$readservercount
        }
        $readtf2path = Read-Host "$($spacer)Please type in your Titanfall2 path $defaultstring [`$env`:ProgramFiles(x86)\Origin\Titanfall2]"
        if (HasNoUserInput $readtf2path){
            Write-Host $usingdefault
        }else{
            $this.TitanfallSourceDir = $readtf2path
        }

        $readnspath = Read-Host "$($spacer)Please type in the directory where you want to install Northstar Server(s) (without quotes). $defaultstring [`$env:localappdata\Northstar-Server]"
        if (HasNoUserInput $readnspath){
            Write-Host $usingdefault
        }else{
            $this.InstallDir = $readnspath
        }
        $this.PSNSWatcherConfig.originpath = "$($this.InstallDir)\"

        $readstartargs = Read-Host "$($spacer)Please type in the starting arguments for all servers. $defaultstring [+setplaylist private_match -dedicated -multiple -softwared3d11]"
        if (HasNoUserInput $readstartargs){
            Write-Host $usingdefault
        }else{
            $this.StartingArgsAll = $readstartargs
        }


        $readudpstart = Read-Host "$($spacer)Please type in the starting UDP port you want to use. $defaultstring [37015]"
        if (HasNoUserInput $readudpstart){
            Write-Host $usingdefault
        }
        else{
            $this.UDPStartPort = [int]$readudpstart
        }
        if($readservercount -gt 1){
            $readudpend = Read-Host "$($spacer)Please type in the ending UDP port you want to use. $defaultstring [37019]"
            if (HasNoUserInput $readudpend){
                Write-Host $usingdefault
            }
            else{
                $this.UDPEndPort = [int]$readudpend
            }
        }

        $readtcpstart = Read-Host "$($spacer)Please type in the starting TCP port you want to use. $defaultstring [8081]"
        if (HasNoUserInput $readtcpstart){
            Write-Host $usingdefault
        }else{
            $this.TCPStartPort = [int]$readtcpstart
        }
        if($readservercount -gt 1){
            $readtcpend = Read-Host "$($spacer)Please type in the ending TCP port you want to use. $defaultstring [8085]"
            if (HasNoUserInput $readtcpend){
            Write-Host $usingdefault
            }else{
                $this.TCPEndPort = [int]$readtcpend
            }
        }

        $readnameprefix = Read-Host "$($spacer)Please type in the prefix you want to use for the servers name. $defaultstring [Northstar Server generated by PowerShell]"
        if (HasNoUserInput $readnameprefix){
            Write-Host $usingdefault
        }else{
            $this.ServerNamePrefix = $readnameprefix
        }
        $this.PSNSWatcherConfig.myserverfilternamearray = $this.PSNSWatcherConfig.myserverfilternamearray + @($this.ServerNamePrefix)
        
        $this.PSNSWatcherConfig.northstarlauncherargs = $this.PSNSWatcherConfig.northstarlauncherargs + @($this.StartingArgsAll)

        $tcpport = $this.TCPStartPort
        $udpport = $this.UDPStartPort
        For($servercounter = 0;$servercounter -lt $this.ServerCount;$servercounter++){
            $this.NorthstarServers.Add([NorthstarServer]::new())
            $this.NorthstarServers[$servercounter].ns_server_name = '"' +($this.ServerNamePrefix) + " #$($servercounter+1)" + '"'
            $this.NorthstarServers[$servercounter].Directory = [string]($servercounter+1)
            $this.PSNSWatcherConfig.gamedirs = $this.PSNSWatcherConfig.gamedirs + @($this.NorthstarServers[$servercounter].Directory)
            $this.NorthstarServers[$servercounter].AbsolutePath = ($this.InstallDir) + "\" +$this.NorthstarServers[$servercounter].Directory
            $this.NorthstarServers[$servercounter].ns_player_auth_port = $tcpport
            $this.PSNSWatcherConfig.tcpportarray = $this.PSNSWatcherConfig.tcpportarray + $this.NorthstarServers[$servercounter].ns_player_auth_port
            $this.NorthstarServers[$servercounter].UDPPort = $udpport
            $this.PSNSWatcherConfig.udpportarray = $this.PSNSWatcherConfig.udpportarray + @($this.NorthstarServers[$servercounter].UDPPort)
            $this.NorthstarServers[$servercounter].Tickrate = [TickRate]::new()
            $this.NorthstarServers[$servercounter].StartingArgs = ($this.StartingArgsAll) + " -port $($this.NorthstarServers[$servercounter].UDPPort)"
            
            if($udpport -gt $this.UDPEndPort){
                throw "Not enough UDP Ports available for the amount of servers. Servercount: " +$this.ServerCount + " UDP Start port: " +$this.UDPStartPort + " UDP end port: " +$this.UDPEndPort
            }
            
            if($tcpport -gt $this.TCPEndPort){
                throw "Not enough TCP Ports available for the amount of servers. Servercount: "+$this.ServerCount+" TCP Start port: "+$this.TCPStartPort+" TCP end port: "+$this.TCPEndPort
            }
            
            $readgamemode = Read-Host "$($spacer)What gamemode would you like to run on Server" $this.NorthstarServers[$servercounter].ns_server_name " $defaultstring [tdm]"
            if (HasNoUserInput $readgamemode){
                Write-Host $usingdefault
            }else{
                $this.NorthstarServers[$servercounter].LastGamemode = $readgamemode
            }

            $readlobbycanchange = Read-Host "$($spacer)Do you want players to be able to change map and mode in lobby on Server" $this.NorthstarServers[$servercounter].ns_server_name " $defaultstring [N]"
            if (HasNoUserInput $readlobbycanchange){
                Write-Host $usingdefault
            }else{
                switch ($readlobbycanchange){
                    "N" {$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 2}
                    "Y" {$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 0}
                }
            }
            $udpport++
            $tcpport++
        }
    }

    [void]Install(){ #install all servers
        if(Test-Path ($this.NorthstarSourceDir)){
                Write-Host "Northstar source directory exists."
                if(Test-Path "$($this.NorthstarSourceDir)\R2Northstar"){
                    Write-Host "$($this.NorthstarSourceDir)\R2Northstar exists"
                    if("$($this.NorthstarSourceDir)\NorthstarLauncher.exe"){
                        Write-Host "Executable NorthstarLauncher.exe exists"
                    }
                    else{
                        throw "Executable $($this.NorthstarSourceDir)\NorthstarLauncher.exe not found."
                    }
                }else{
                    throw "$($this.NorthstarSourceDir)\R2Northstar does not exist."
                }
            }else{
                throw "Northstar source directory does not exist."
            }
        if(Test-Path $this.InstallDir){
            Write-Host "Destination Path InstallDir $($this.InstallDir) exists."
        }
        else{
            Write-Host "Destination Path InstallDir $($this.InstallDir) missing. Creating ..."
            New-Item -ItemType Directory -Path $($this.InstallDir)
        }
        if(Test-Path $this.TitanfallSourceDir){
            Write-Host "Titanfall Source folder exists."
        }else{
            throw "Titanfall source at $($this.TitanfallSourceDir) does not exist."
        }
        ForEach($server in $this.NorthstarServers){
            if(Test-Path "$($this.installdir)\$($server.Directory)"){
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name does exist."
            }else{
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name missing. Creating..."
                New-Item -ItemType Directory -Path "$($this.installdir)\$($server.Directory)"
            }
            
            Write-Host "Creating symbolic links for Titanfall2 files in $($this.installdir)\$($server.Directory)"
            $tffiles = Get-Childitem $this.TitanfallSourceDir
            ForEach($file in $tffiles){
                New-Item -ItemType SymbolicLink -Path "$($this.installdir)\$($server.Directory)\$($file.name)" -Value $file.fullname
            }

            Write-Host "Copying files from Northstar Source to Destination"
            Copy-Item -Recurse -Path "$($this.NorthstarSourceDir)\*" -Destination "$($this.installdir)\$($server.Directory)" -ErrorAction SilentlyContinue
        }
    }

    [void]WriteConfigurationAll(){
        ForEach($server in $this.NorthstarServers){
            $server.WriteConfiguration()
        }
    }
}

class PSNSWatcherConfig{
    [System.Collections.ArrayList]$ConfigLinesArray = @()
    [string]$InstallPath
    

    [string]$originpath #
    [array]$gamedirs #
    [array]$tcpportarray #
    [array]$udpportarray  #
    [array]$myserverfilternamearray #
    [string]$northstarlauncherargs #

    [bool]$allowargumentoverride = $false
    [string]$enginerrorclosepath = "$($PSScriptRoot)\engineerrorclose.exe"
    [int]$deletelogsafterdays = 1
    [int]$waittimebetweenserverstarts = 15
    [int]$waittimebetweenloops = 15
    [int]$waitwithstartloopscount = 8
    [bool]$serverbrowserenable = $true
    [string]$serverbrowserfilepath = "index.html"
    [int]$restartserverhours = 4
    [string]$masterserverlisturl = "https://northstar.tf/client/servers"
    [bool]$showuptimemonitor = $true
    [int]$showuptimemonitorafterloops = 60
    [bool]$crashlogscollect = $false
    [string]$crashlogspath = ""
    [int]$deletelogsminutes = 60
    [bool]$enablelogging = $false

    PSNSWatcherConfig($inputInstallPath){
        $this.InstallPath = $inputInstallPath        
        #$this.enginerrorclosepath = "$($inputInstallPath)\engineerrorclose.exe"
    }

    [void]WriteConfig(){
        $CVarArray = (($this | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($Cvar in $CVarArray){
            if($Cvar -notmatch 'ConfigLinesArray'){
                #$this.ConfigLinesArray.Add($Cvar +"="+ $this."$Cvar")
                if($this."$CVar".gettype().Name -eq 'Object[]'){
                    $string = "`$$CVar" + " = @("
                    ForEach($value in $this."$CVar"){
                        if($value.gettype().Name -eq "string"){
                            $string = $string + '"' +$value + '",'
                        }else{
                            $string = $string +$value +','
                        }                        
                    }
                    $string =$string.Substring(0,$string.length-1)
                    $string = $string + ")"
                    $this.ConfigLinesArray.Add($string)
                }
                if($this."$CVar".gettype().Name -eq 'Int32'){
                    $string = "`$$CVar = $($this."$CVar")"
                    $this.ConfigLinesArray.Add($string)           
                }
                if($this."$CVar".gettype().Name -eq 'String'){
                    $string = "`$$CVar = `"$($this."$CVar")`""
                    $this.ConfigLinesArray.Add($string)           
                }
                if($this."$CVar".gettype().Name -eq 'Boolean'){
                    $string = "`$$CVar = `$$($this."$Cvar")"
                    $this.ConfigLinesArray.Add($string)
                }
            }
        }
        $this.ConfigLinesArray | Out-file -Encoding utf8 -FilePath "$($PSScriptRoot)\northstar server watcher-config.ps1"
    }
}

#endregion classes
## DONT FORGET -maxplayersplaylist => add to code




#region process
cd $PSScriptRoot
$installer.GetUserInputConfig()
$installer.Install()
$installer.WriteConfigurationAll()
Write-Host "Config written!"
<#$startservers = Read-Host "$($spacer)Do you want to start all servers we just set up? `[Y]"
        if (HasNoUserInput $startservers){
            Write-Host $usingdefault
            ForEach($server in $installer.NorthstarServers){
                $server.Start()
            }
        }else{
            switch($startservers){
                "Y"{
                    ForEach($server in $installer.NorthstarServers){
                        $server.Start()
                    }
                }
                "N"{Write-Host "Not starting servers. :-("}
            }
        }#>


$generatepsmswatcherconf = Read-Host "$($spacer)Do you want to generate a config file for faky's PSNorthstarWatcher and start the script/servers? $defaultstring [Y]"
        if (HasNoUserInput $generatepsmswatcherconf){
            Write-Host $usingdefault
            $installer.PSNSWatcherConfig.WriteConfig()
            start-process powershell.exe -WorkingDirectory $PSScriptRoot -ArgumentList "-File `"$($PSScriptRoot)\northstar server watcher.ps1`""
        }else{
            Switch($generatepsmswatcherconf){
                "Y"{
                    $installer.PSNSWatcherConfig.WriteConfig()
                    #Start-Process powershell.exe -WorkingDirectory $PSScriptRoot -ArgumentList "-File `"$($PSScriptRoot)\PSNorthstarSetup.ps1`"" -Verb runas 
                    start-process powershell.exe -WorkingDirectory $PSScriptRoot -ArgumentList "-File `"$($PSScriptRoot)\northstar server watcher.ps1`""
                }
                "N"{}
            }
        }

Write-Host "Your WAN IP is: $wanip"
Write-Host "Your Router's LAN IP is: $routerip"
Write-Host "Your LAN IP is: $lanip"
pause
#endregion process